<div class="big-div">
  <h1 class="title">To Do's</h1>
  <div class="container">
    <button class="done">
      <i class="fa-solid fa-chevron-down" id="caret"></i>
      <!-- lo del principio es para agregarle un espacio -->
      <!-- <h2>&nbsp;What needs to be done?</h2> -->
      <input
        type="text"
        id="todo-content"
        placeholder="  What needs to be done?"
      />
    </button>
    <div id="list"></div>
    <div class="options">
      <button class="items-remaining" style="text-align: left;"></button>
      <div class="middle-options">
        <button id="all">all</button>
        <button id="active">active</button>
        <button id="completed">completed</button>
      </div>
      <button id="clear">clear completed</button>
    </div>
  </div>
</div>

<style>
  .big-div {
    top: 20%;
    position: absolute;
  }
  .done {
    border: 2px solid #a29e9e;
    font-size: 22px;
    padding: 6px;
    display: flex;
    flex-direction: row;
    cursor: pointer;
    background-color: #ffffff;
    opacity: 1;
    align-items: center;
  }
  #list {
    display: none;
    position: relative;
    transition: 1s;
  }
  .options {
    align-items: center;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding: 3.5px;
    border-top: 0px solid #a29e9e;
    border-left: 2px solid #a29e9e;
    border-right: 2px solid #a29e9e;
    border-bottom: 2px solid #a29e9e;
    font-size: 10px;
  }
  .middle-options {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    text-align: center;
    width: 33%;
    padding: 3px;
    margin-left: 30px;
  }
  #clear {
    text-decoration: underline;
    padding: 3px;
    border-radius: 8%;
  }
  #active {
    padding: 3px;
    border-radius: 8%;
  }
  #completed {
    padding: 3px;
    border-radius: 8%;
  }
  #all {
    padding: 3px;
    border-radius: 8%;
  }

  #todo-content {
    outline: none;
    margin-left: 2px;
  }
</style>

<script>
  //css classes definitions
  const TODO_LIST = document.getElementById("list") as HTMLHtmlElement;
  const OPTIONS = document.querySelector(".options") as HTMLHtmlElement;
  const CARET = document.getElementById("caret") as HTMLHtmlElement;
  const ITEMS_REMAINING = document.querySelector(
    ".items-remaining"
  ) as HTMLElement;
  const INPUTBOX = document.getElementById("todo-content") as HTMLInputElement;

  // default list of thing todo definition
  const MY_LIST_TODO = [
    "Go Shopping",
    "Refactor Backend",
    "Add new feature to App",
    "Todo 1",
  ];

  // variable for knowing how much items arent checked
  let itemsRemaining = MY_LIST_TODO.length;
  ITEMS_REMAINING.textContent = itemsRemaining + " items remaining";

  //function that creates tasks from elements of type Task.
  function addTaskToTasklist(description: string, completed: boolean) {
    const TODO_DIV = document.createElement("div") as HTMLDivElement;
    const TODO_CHECKBOX = document.createElement("div") as HTMLDivElement;
    const TODO_ITEM = document.createElement("h2");
    const TODO_CHECK = document.createElement("i") as HTMLHtmlElement;

    //todo atributes
    TODO_ITEM.textContent = description;

    //todo div atributes
    TODO_DIV.id = Math.random().toString(36).substring(7);
    // createTasks(INPUTBOX.value);
    // TODO_DIV.setAttribute();

    //check of the checkbox
    TODO_CHECK.classList.add("fa-solid", "fa-check");
    TODO_CHECKBOX.appendChild(TODO_CHECK);

    //circle of the checkbox
    TODO_CHECKBOX.classList.add("check-box");

    //div of the todos
    TODO_DIV.appendChild(TODO_CHECKBOX);
    TODO_DIV.appendChild(TODO_ITEM);
    TODO_DIV.classList.add("todo-item");

    if (completed === true) {
      TODO_ITEM.style.textDecoration = "line-through";
    }

    //linetrough click
    TODO_DIV.addEventListener("click", () => {
      if (TODO_ITEM.style.textDecoration === "line-through") {
        TODO_ITEM.style.textDecoration = "none";
        TODO_ITEM.style.color = "#000000";
        TODO_CHECK.style.opacity = "0";
        itemsRemaining = itemsRemaining + 1;
        ITEMS_REMAINING.textContent = itemsRemaining + " items remaining";
      } else {
        TODO_ITEM.style.textDecoration = "line-through";
        TODO_ITEM.style.color = "#a29e9e";
        TODO_CHECK.style.opacity = "1";
        itemsRemaining = itemsRemaining - 1;
        ITEMS_REMAINING.textContent = itemsRemaining + " items remaining";
      }
    });
    TODO_LIST.appendChild(TODO_DIV);
  }

  //foreach
  MY_LIST_TODO.forEach((text) => {
    addTaskToTasklist(text, false);
  });

  // To Do's click
  CARET.addEventListener("click", () => {
    if (TODO_LIST.style.display === "block") {
      TODO_LIST.style.display = "none";
      CARET.style.transform = "rotate(0deg)";
      CARET.style.color = "#000000";
    } else {
      TODO_LIST.style.display = "block";
      CARET.style.transform = "rotate(90deg)";
      CARET.style.color = "#a29e9e";
    }
  });

  //declaration of the id's of the bottom options
  const COMPLETED = document.getElementById("completed") as HTMLButtonElement;
  const SEE_ALL = document.getElementById("all") as HTMLButtonElement;
  const CLEAR_COMPLETED = document.getElementById("clear") as HTMLButtonElement;
  const ACTIVE = document.getElementById("active") as HTMLButtonElement;

  //see all onclick function
  const seeAllOnClick = () => {
    const TODO_LIST_CONTENT = Array.from(TODO_LIST.children); //this has to stay here because some elements may have been added to the list
    for (let x = 0; x < TODO_LIST_CONTENT.length; x++) {
      TODO_LIST.children[x].setAttribute("style", "display: ; ");
    }
    unCheckBoxes();
    SEE_ALL.setAttribute("style", "border: 1px solid #a29e9e;");
  };
  SEE_ALL.onclick = seeAllOnClick;

  //clear compleated onclick function
  const clearCompletedOnClick = () => {
    const TODO_LIST_CONTENT = Array.from(TODO_LIST.children); //esto tiene que estar en la funcion para que se actualice cada vez que se añada un objeto al TODO_LIST
    for (let x = 0; x < TODO_LIST_CONTENT.length; x++) {
      let aux = getComputedStyle(
        TODO_LIST.children[x].children[1]
      ).textDecoration;
      if (aux.includes("line-through")) {
        TODO_LIST.children[x].setAttribute("style", "display: none; ");
      } else {
        TODO_LIST.children[x].setAttribute("style", "display: ; ");
      }
    }
    unCheckBoxes();
    OPTIONS.setAttribute("style", "padding: 3.5px; ");
  };
  CLEAR_COMPLETED.onclick = clearCompletedOnClick;

  //Compleated elements button onclick function

  const completedOnClick = () => {
    const TODO_LIST_CONTENT = Array.from(TODO_LIST.children); //esto tiene que estar en la funcion para que se actualice cada vez que se añada un objeto al TODO_LIST
    for (let x = 0; x < TODO_LIST_CONTENT.length; x++) {
      let aux = getComputedStyle(
        TODO_LIST.children[x].children[1]
      ).textDecoration;
      if (!aux.includes("line-through")) {
        TODO_LIST.children[x].setAttribute("style", "display: none; ");
      } else {
        TODO_LIST.children[x].setAttribute("style", "display: ; ");
      }
    }
    unCheckBoxes();
    COMPLETED.setAttribute("style", "border: 1px solid #a29e9e;");
  };
  COMPLETED.onclick = completedOnClick;

  //ACTIVE elements button onclick function

  const activeOnClick = () => {
    const TODO_LIST_CONTENT = Array.from(TODO_LIST.children); //esto tiene que estar en la funcion para que se actualice cada vez que se añada un objeto al TODO_LIST
    for (let x = 0; x < TODO_LIST_CONTENT.length; x++) {
      let aux = getComputedStyle(
        TODO_LIST.children[x].children[1]
      ).textDecoration;
      if (aux.includes("line-through")) {
        TODO_LIST.children[x].setAttribute("style", "display: none; ");
      } else {
        TODO_LIST.children[x].setAttribute("style", "display: ; ");
      }
    }
    unCheckBoxes();
    ACTIVE.setAttribute("style", "border: 1px solid #a29e9e;");
  };
  ACTIVE.onclick = activeOnClick;

  //function that selects the bottom option you press
  function unCheckBoxes() {
    // border: 1px solid #000000;
    ACTIVE.setAttribute("style", "border: 0px;");
    COMPLETED.setAttribute("style", "border: 0px;");
    SEE_ALL.setAttribute("style", "border: 0px;");
    OPTIONS.setAttribute("style", "padding: 3px; ");
    // dinamicClick();
  }

  //this funtion makes the clicks dinamic when we have
  function dinamicClick() {
    if (
      getComputedStyle(SEE_ALL).border === "0.666667px solid rgb(162, 158, 158)"
    ) {
      // seeAllOnClick();
    } else {
      if (
        getComputedStyle(ACTIVE).border ===
        "0.666667px solid rgb(162, 158, 158)"
      ) {
        activeOnClick();
        console.log("Active");
      }
      if (
        getComputedStyle(COMPLETED).border ===
        "0.666667px solid rgb(162, 158, 158)"
      ) {
        completedOnClick();
      }
    }
  }

  INPUTBOX.addEventListener("keydown", (event) => {
    if (event.key === "Enter") {
      // addTaskToTasklist()
      // printList();
      addTaskToTasklist(INPUTBOX.value.trim(), false);
      INPUTBOX.value = "";
    }
  });

  seeAllOnClick(); //this makes the all square start apearing

  //this is the click that makes the list more dinamic when you press something
  TODO_LIST.addEventListener("click", () => {
    dinamicClick();
  });
</script>
